Prioritaire
===========

- urgent : log rotate ou a minima taille max
- urgent : exit-fee doit être multiplier par le raw PNL
- taille des trades

- attention aux trades, orders, positions non libéré à la fin si pas cloturé (coté trader proxy et local trader)

- gestion limit et stop order sur le local trader (mais attention, très lié à la gestion des context trade life cycle)
- gestion des statistiques par account (paper trader local)
- fixer les size sur connectormessagereceivetickaggreged.cpp

- events to REDIS
  - trades entry, update, exit
  - strategy results update
  - account details (balance...) initial, update
- events from REDIS
  - ...

- ind margin trade
  - position events

- position trade

- signaux :
  - order create, canceled, deleted, traded (partially, completed), error
  - position create, updated, modified, closed, deleted
  - account asset balance, balance

- strategy contexts
  - builder ? pas vraiment nécessaire à voir quand même pour simplifier l'initialisation et la gestion
    - init
  - trade life-cycle components :
    - entry (plutôt lié à la stratégie en elle même donc logiquement non nécessaire)
    - stop-loss (gestion de l'ordre de sortie sur policy, exemple at close ou simple)
    - take-profit (pareil que stop-loss)
    - dynamic-take-profit (optionnel)


Secondaire
==========

- monitoring
  - est-ce que le monitor communique avec un socket (zMQ, o3d::net) ou au travers de REDIS ?
  - cli simple monitor one command at time
  - cli advanced monitor ncursuse
  - web monitor (voir version python)

- events to REDIS
  - strategy data
    - analysers data
       - ohlc(s)
       - indicators
       - states
       - others
    - contexts data
      - trade components

- connector postgresql à terminer
  - postgresql load market liquidation
  - postgresql load/save user trader state <=> strategy data ?
  - postgresql load/save user active/pending trades data
  - postgresql load/save asset data

- completer o3d::Int32 ZmqConnector::closePosition

- connectors
  - implementer coté strategie
    - order create, update, delete
    - position update, close
    - binance spot, kraken spot, bitmex futures, ig CFD

- position trade
  - open, close, remove, modify tp, modify sl, order events, position events

- live handler


Tertaire
========

- spot trade
  - open, close, remove, modify tp, modify sl, order events, position events

- indicators :
  - volume profile
  - composite volume profile

- eventuellement avoir une table VP comme on a pour les OHLC mais donc fixé pour une temporalité ou plusieurs

- tick-bar based strategy (non timeframe based)
  - descente de gradient stochastique (SGD)
    - SGD classique
    - Adam (Adaptive Moment Estimation)
    - RMSprop (Root Mean Square Propagation)
    - Adagrad (Adaptive Gradient)

- connector postgresql à terminer
  - postgresql load market liquidation
  - postgresql save market liquidation data
  - postgresql save market info data
  - postgresql save OHLCs data

- replication mode
  - mode live mais connexion à une source de donnée en WebSocket ou REST et simples signaux buy/sell/update
    - update peut être cancel, modifier un sl/tp/breakeven, partial exit

- trade check and repair


Pas important
=============

- connector mysql pas important

- margin trade
  - open, close, remove, modify tp, modify sl, order events, position events

- learning / trainer / optimizer

- stdtrademanager : pourrait avoir deux hashmap orderId et orderRefId pour retrouver plus rapidement le trade associé
  - mais demande un insert/remove et de garder les hashmap à jour
