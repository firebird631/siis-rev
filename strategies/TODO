Urgent
======

- trading session depuis config
- check trading session

- log rotate ou a minima taille max
- exit-fee doit être multiplié par le raw PNL


Prioritaire
===========

- Implementer offset sur breakeven.

- GlobalStatistics sortino ratio ne peut fonctionner sans le maxDrawDown du VirtualAccount
    - Ca implique de faire les calcules PNL, balance... dans le LocalConnector
    - A défaut temporarairement on peut voir pour prendre le DD/MDD par stratégie

- ReversalBar, TickBar, VolumeBar

- Unification des strategies timeframe/rangebar...
    - Probleme des classes specialisée des Analysers

- IndMarginTrade::updateStats complete PNL
- pour les XxxxPositionSignal.refOrderId met on orderId or refOrderId ?
- per market overrides in dot format

- taille des trades
- notional-value pour margin trade, position trade, asset trade

- gestion des statistiques par account (paper trader local)
- verifier/fixer les size sur connectormessagereceivetickaggreged.cpp

- events to REDIS
  - trades entry, update, exit
  - strategy results update
  - account details (balance...) initial, update
- events from REDIS
  - ...

- ind margin trade
  - position delete events (in case of external close/liq)

- signaux :
  - order create, canceled, deleted, traded (partially, completed), error
  - position create, updated, modified, closed, deleted
  - account asset balance, balance

- strategy contexts
  - builder ? pas vraiment nécessaire à voir quand même pour simplifier l'initialisation et la gestion
    - init
  - trade life-cycle components :
    - dynamic-take-profit (optionnel)


Secondaire
==========

- ajouter trade operation (step stop loss)
- ajouter trading region (range, channel)

- trade loads/dumps

- tout comme la version Python mettre un timestamp sur les modification des trades (sl/tp) pour éviter de saturer
  l'API en cas de call successifs

- tout comme la version Python la gestion des close, modify(sl/tp), cancel, remove, doit tenir compte de l'execution
  possible de l'ordre précédent entre le moment ou il est cancel et le nouveau créé (cas ou traded partially)

- monitoring
  - est-ce que le monitor communique avec un socket (zMQ, o3d::net) ou au travers de REDIS ?
  - cli simple monitor one command at time
  - cli advanced monitor ncursuse
  - web monitor (voir version python)

- events to REDIS
  - strategy data
    - analysers data
       - ohlc(s)
       - indicators
       - states
       - others
    - contexts data
      - trade components

- connector postgresql à terminer
  - postgresql load market liquidation
  - postgresql load/save user trader state <=> strategy data ?
  - postgresql load/save user active/pending trades data
  - postgresql load/save asset data

- completer o3d::Int32 ZmqConnector::closePosition

- connectors
  - implementer coté strategie
    - order create, update, delete
    - position update, close
    - binance spot, kraken spot, bitmex futures, ig CFD

- live handler


Tertiaire
=========

- spot trade
  - open, close, remove, modify tp, modify sl, order events, position events

- indicators :
  - volume profile
  - composite volume profile

- eventuellement avoir une table VP comme on a pour les OHLC mais donc fixé pour une temporalité ou plusieurs

- tick-bar based strategy (non timeframe based)
  - descente de gradient stochastique (SGD)
    - SGD classique
    - Adam (Adaptive Moment Estimation)
    - RMSprop (Root Mean Square Propagation)
    - Adagrad (Adaptive Gradient)

- connecteur postgresql à terminer
  - postgresql load market liquidation
  - postgresql save market liquidation data
  - postgresql save market info data
  - postgresql save OHLCs data

- replication mode
  - mode live mais connexion à une source de donnée en WebSocket ou REST et simples signaux buy/sell/update
    - update peut être cancel, modifier un sl/tp/breakeven, partial exit

- trade check and repair


Pas important
=============

- connecteur mysql pas important

- FIFO margin trade
  - open, close, remove, modify tp, modify sl, order events, position events

- learning / trainer / optimizer
